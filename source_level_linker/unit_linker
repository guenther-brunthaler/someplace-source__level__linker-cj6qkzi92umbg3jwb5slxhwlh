#! /bin/sh
set -e
snippet_ext=
seq_ext=.order
unit_marker='@'
lib_path=lib
out_dir=.

cleanup() {
	rc=$?
	test "$TF" && rm -- "$TF"
	test $rc = 0 || echo "$0 failed!" >& 2
}

TF=
trap cleanup 0
trap 'exit $?' INT TERM QUIT HUP

lib_path_is_default=true
sim_notice=
only_preview_diffs=false
while getopts dno:L:M: opt
do
	case $opt in
		d) only_preview_diffs=true;;
		n) sim_notice="SIMULATION: ";;
		o) test -d "$OPTARG"; out_dir=$OPTARG;;
		L)
			if $lib_path_is_default
			then
				lib_path=
				lib_path_is_default=false
			fi
			lib_path=$lib_path${lib_path+:":"}$OPTARG
			;;
		M) unit_marker=$OPTARG;; # -M '' disables separators.
		*) false || exit
	esac
done
shift `expr $OPTIND - 1 || :`

verify_lib_path() {
	local oldIFS n
	oldIFS=$IFS
	IFS=:; set -- $lib_path; IFS=$oldIFS
	n=$#
	while test $n != 0
	do
		test -d "$1" && set -- "$@" "$1"
		shift
		n=`expr $n - 1 || :`
	done
	IFS=:; lib_path=$*; IFS=$oldIFS
}
verify_lib_path

TF=`mktemp -- ${TMPDIR:-/tmp}/${0##*/}.XXXXXXXXXX`

# Set $uf to file name of existing file for unit $unit.
# Use $lib_path as the directory search path.
locate_unit() {
	local oldIFS sfx
	oldIFS=$IFS
	IFS=:; set -- $lib_path; IFS=$oldIFS
	sfx=/$unit$snippet_ext
	for uf
	do
		uf=$uf$sfx
		test -f "$uf" && return
	done
	echo "Could not find \"\$DIR$sfx\" with \$DIR from '$lib_path'!" >& 2
	false || exit
}

restored=0
for of
do
	cf=${of%"$seq_ext"}
	test "$cf" != "$of"
	cf=$out_dir/`basename -- "$cf"`
	echo "${sim_notice}Recombining file '$cf'..."
	while IFS= read -r unit
	do
		if test "$unit_marker"
		then
			printf '%s\n' "$unit_marker$unit"
		fi
		locate_unit
		cat -- "$uf"
	done < "$of" > "$TF"
	if test -f "$cf"
	then
		if cmp -s -- "$cf" "$TF"
		then
			echo "Existing file is up to date" \
				" - skipping recreation."
			continue
		fi
		if $only_preview_diffs
		then
			diff -u -- "$cf" "$TF" || :
			continue
		fi
	fi
	if test -z "$sim_notice"
	then
		cat "$TF" > "$cf"
	fi
	restored=`expr $restored + 1`
done
echo "$sim_notice$restored file(s) has/have been written."
